(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{114:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return f}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=a.a.createContext({}),d=function(e){var t=a.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=d(e.components);return a.a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),l=d(n),b=r,f=l["".concat(s,".").concat(b)]||l[b]||p[b]||o;return n?a.a.createElement(f,c(c({ref:t},u),{},{components:n})):a.a.createElement(f,c({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=b;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var u=2;u<o;u++)s[u]=n[u];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},92:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return u})),n.d(t,"default",(function(){return l}));var r=n(3),a=n(7),o=(n(0),n(114)),s=["components"],c={id:"useCachedResources",title:"useCachedResources",sidebar_label:"useCachedResources"},i={unversionedId:"useCachedResources",id:"useCachedResources",isDocsHomePage:!1,title:"useCachedResources",description:"Assets are cached differently depending on where they're stored and how they're used. This guide offers best practices for making sure you only download assets when you need to. In order to keep the loading screen visible while caching assets, it's also a good idea to render AppLoading and only that component until everything is ready.",source:"@site/docs\\useCachedResources.md",slug:"/useCachedResources",permalink:"/docs/useCachedResources",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/useCachedResources.md",version:"current",sidebar_label:"useCachedResources"},u=[{value:"Usage",id:"usage",children:[{value:"Basic Usage",id:"basic-usage",children:[]},{value:"Caching Images and fonts",id:"caching-images-and-fonts",children:[]}]}],d={toc:u};function l(e){var t=e.components,n=Object(a.a)(e,s);return Object(o.b)("wrapper",Object(r.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Assets are cached differently depending on where they're stored and how they're used. This guide offers best practices for making sure you only download assets when you need to. In order to keep the loading screen visible while caching assets, it's also a good idea to render ",Object(o.b)("inlineCode",{parentName:"p"},"AppLoading")," and only that component until everything is ready."),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("h3",{id:"basic-usage"},"Basic Usage"),Object(o.b)("p",null,"This function will preload the Ubuntu Fonts and ",Object(o.b)("inlineCode",{parentName:"p"},"@expo/vector-icons")," put this in your App.js or your root component, and will return a ",Object(o.b)("inlineCode",{parentName:"p"},"boolean")," to tell you if your assets are ready or not."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"import { useCachedResources } from 'react-native-rapi-ui';\n\nconst App = () => {\n    const isLoadingComplete = useCachedResources();\n    if (!isLoadingComplete) {\n        return <Loading />;\n    } else {\n        return <HomeScreen />;\n    }\n};\n\nexport default App;\n")),Object(o.b)("h3",{id:"caching-images-and-fonts"},"Caching Images and fonts"),Object(o.b)("p",null,"You can preload your images and any other fonts too, this function have 2 arguments ",Object(o.b)("inlineCode",{parentName:"p"},"useCachedResources(images, fonts)")),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:"center"},"args"),Object(o.b)("th",{parentName:"tr",align:"center"},"value"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"center"},Object(o.b)("strong",{parentName:"td"},"images")),Object(o.b)("td",{parentName:"tr",align:"center"},"[image,image...]")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"center"},Object(o.b)("strong",{parentName:"td"},"fonts")),Object(o.b)("td",{parentName:"tr",align:"center"},"{font, font...}")))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"import { useCachedResources } from 'react-native-rapi-ui';\n\nconst App = () => {\n    const isLoadingComplete = useCachedResources(\n        //images\n        [require('./assets/logo'), require('./assets/headerImage')],\n\n        //fonts\n        {\n            otherFont1: require('../fonts/otherFont1.ttf'),\n            otherFont2: require('../fonts/otherFont2.ttf'),\n            otherFont3: require('../fonts/otherFont3.ttf'),\n        }\n    );\n    if (!isLoadingComplete) {\n        return <Loading />;\n    } else {\n        return <HomeScreen />;\n    }\n};\n\nexport default App;\n")))}l.isMDXComponent=!0}}]);